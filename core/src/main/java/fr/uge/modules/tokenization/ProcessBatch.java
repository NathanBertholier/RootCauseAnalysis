package fr.uge.modules.tokenization;

import fr.uge.modules.api.model.entities.LogEntity;
import fr.uge.modules.api.model.entities.TokenEntity;

import java.sql.*;
import java.util.concurrent.Executors;
import java.util.concurrent.ScheduledExecutorService;
import java.util.concurrent.TimeUnit;
import java.util.concurrent.locks.ReentrantLock;
import java.util.logging.Level;
import java.util.logging.Logger;

public class ProcessBatch {
    private final PreparedStatement preparedLog;
    private final PreparedStatement preparedToken;
    private final Logger logger = Logger.getGlobal();
    private final long BATCH_SECONDS = 3;
    private final ReentrantLock lock = new ReentrantLock();

    public ProcessBatch() throws SQLException {
        Connection connection = DriverManager.getConnection("jdbc:postgresql://localhost:5432/rootcause?user=root&password=root&stringtype=unspecified");
        preparedLog = connection.prepareStatement("INSERT INTO log(id,datetime,autogenerateddatetime) VALUES (?, ?, ?)");
        preparedToken = connection.prepareStatement("INSERT INTO token (idlog, idtokentype, value) VALUES (?, ?, ?)");
    }

    public void addInBatch(LogEntity logEntity) {
        lock.lock();
        this.addInLogBatch(logEntity);
        logEntity.tokens.forEach(token -> addInTokenBatch(token, logEntity.id));
        lock.unlock();
    }

    private void addInLogBatch(LogEntity logEntity) {
        try {
            preparedLog.setLong(1, logEntity.id);
            preparedLog.setTimestamp(2, logEntity.datetime);
            preparedLog.setBoolean(3, logEntity.autogeneratedDatetime);
            preparedLog.addBatch();
        } catch (SQLException e) {
            logger.log(Level.SEVERE, "Error while adding in batch", e);
        }
    }

    private void addInTokenBatch(TokenEntity token, long id) {
        try {
            preparedToken.setLong(1, id);
            preparedToken.setInt(2, token.idtokentype);
            preparedToken.setString(3, token.value);
            preparedToken.addBatch();
        } catch (SQLException e) {
            logger.log(Level.SEVERE, "Error while adding in batch", e);
        }
    }

    public void batchRunnable() {
        try {
            Runnable batchRunnable = this::execute;
            ScheduledExecutorService executor = Executors.newScheduledThreadPool(1);
            executor.scheduleAtFixedRate(batchRunnable, 0, BATCH_SECONDS, TimeUnit.SECONDS);
        } catch (Exception e) {
            logger.log(Level.SEVERE, "Exception", e);
            System.out.println(e);
            Thread.currentThread().interrupt();
        }
    }

    private void execute() {
        lock.lock();
        try {
            System.out.println("BATCH EXECUTED ");
            preparedLog.executeBatch();
            preparedToken.executeBatch();
        } catch (SQLException e) {
            e.printStackTrace();
        }
        lock.unlock();
    }
}